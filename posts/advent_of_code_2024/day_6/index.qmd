---
title: "AOC 2024: Day 6"
description: "Day 6 of the Advent of Code 2024: 'Guard Gallivant'"
author: "Chris Brownlie"
date: "2024-12-06"
from: markdown+emoji
categories:
- rstats
- "advent of code"
---

![](/assets/advent_of_code.png){height=90% width=90% fig-align=center fig-alt="Logo for Advent of Code"}

## Day 4: Guard Gallivant

The Historians use their fancy device again, this time to whisk you all away to the North Pole prototype suit manufacturing lab... in the year 1518! It turns out that having direct access to history is very convenient for a group of historians.

You still have to be careful of time paradoxes, and so it will be important to avoid anyone from 1518 while The Historians search for the Chief. Unfortunately, a single guard is patrolling this part of the lab.

Maybe you can work out where the guard will go ahead of time so that The Historians can search safely?

You start by making a map (your puzzle input) of the situation. For example:

```
....#.....
.........#
..........
..#.......
.......#..
..........
.#..^.....
........#.
#.........
......#...
```

The map shows the current position of the guard with ^ (to indicate the guard is currently facing up from the perspective of the map). Any obstructions - crates, desks, alchemical reactors, etc. - are shown as #.

Lab guards in 1518 follow a very strict patrol protocol which involves repeatedly following these steps:
- If there is something directly in front of you, turn right 90 degrees.
- Otherwise, take a step forward.

Following the above protocol, the guard moves up several times until she reaches an obstacle (in this case, a pile of failed suit prototypes):

```
....#.....
....^....#
..........
..#.......
.......#..
..........
.#........
........#.
#.........
......#...
```

Because there is now an obstacle in front of the guard, she turns right before continuing straight in her new facing direction:

```
....#.....
........>#
..........
..#.......
.......#..
..........
.#........
........#.
#.........
......#...
```

Reaching another obstacle (a spool of several very long polymers), she turns right again and continues downward:

```
....#.....
.........#
..........
..#.......
.......#..
..........
.#......v.
........#.
#.........
......#...
```

This process continues for a while, but the guard eventually leaves the mapped area (after walking past a tank of universal solvent):

```
....#.....
.........#
..........
..#.......
.......#..
..........
.#........
........#.
#.........
......#v..
```

By predicting the guard's route, you can determine which specific positions in the lab will be in the patrol path. Including the guard's starting position, the positions visited by the guard before leaving the area are marked with an X:

```
....#.....
....XXXXX#
....X...X.
..#.X...X.
..XXXXX#X.
..X.X.X.X.
.#XXXXXXX.
.XXXXXXX#.
#XXXXXXX..
......#X..
```

In this example, the guard will visit 41 distinct positions on your map.

Predict the path of the guard. How many distinct positions will the guard visit before leaving the mapped area?

```{r solution}
library(purrr)
library(stringr)
library(tibble)

# Read in data
input <- readr::read_lines("input.txt") |>
  str_split("") |>
  map_dfr(\(x) {
    x |> 
      set_names(str_c("col_", 1:length(x))) |> 
      as_tibble_row()
  })

### Helper functions
# Determine if a coordinate is within a dataframe
within_bounds <- function(location, limit_df) {
  if (any(dim(limit_df)-location < 0) || 
      any(location < 1)) return(FALSE)
  TRUE
}

# Turn a direction vector 90 degrees
turn <- function(d) c(d[2], -d[1])

# Get starting location from a map
get_start <- function(input_df, start_icon = "^") {
  col <- map_lgl(input_df, \(col) any(col == start_icon)) |> 
    set_names(NULL) |> 
    which()
  row <- pmap_lgl(input, \(...) any(list(...) == start_icon)) |> 
    which()
  c(row, col)
}

# Loop through guard movement
map <- input
location <- get_start(map) # Get start location
direction <- c(-1,0) # Starts looking up
locations_visited <- list() # Track where the guard has been

# Loop while still on the map
while(within_bounds(location, map)) {
  
  # Look at the next step
  new_location <- location + direction
  
  # If next step is off the map, record and end while loop
  if (!within_bounds(new_location, map)) {
    map[location[1], location[2]] <- "X"
    locations_visited[[length(locations_visited)+1]] <- location
    break
  }
  
  # See what next step contains
  look <- map[new_location[1], new_location[2]]
  
  # If obstacle, turn and try again (keeping same location)
  if (look == "#") {
    direction <- turn(direction)
    next
  }
  
  # If steppable
  if (look == "."|look == "X") {
    # Mark current square as stepped on
    map[location[1], location[2]] <- "X"
    locations_visited[[length(locations_visited)+1]] <- location
    
    # Move to next step
    location <- new_location
    next
  }
}

# Count squares stepped on
length(unique(locations_visited))
```

Success! :star:

## Part Two

While The Historians begin working around the guard's patrol route, you borrow their fancy device and step outside the lab. From the safety of a supply closet, you time travel through the last few months and record the nightly status of the lab's guard post on the walls of the closet.

Returning after what seems like only a few seconds to The Historians, they explain that the guard's patrol area is simply too large for them to safely search the lab without getting caught.

Fortunately, they are pretty sure that adding a single new obstruction won't cause a time paradox. They'd like to place the new obstruction in such a way that the guard will get stuck in a loop, making the rest of the lab safe to search.

To have the lowest chance of creating a time paradox, The Historians would like to know all of the possible positions for such an obstruction. The new obstruction can't be placed at the guard's starting position - the guard is there right now and would notice.

In the above example, there are only 6 different positions where a new obstruction would cause the guard to get stuck in a loop. The diagrams of these six situations use O to mark the new obstruction, | to show a position where the guard moves up/down, - to show a position where the guard moves left/right, and + to show a position where the guard moves both up/down and left/right.

Option one, put a printing press next to the guard's starting position:

```
....#.....
....+---+#
....|...|.
..#.|...|.
....|..#|.
....|...|.
.#.O^---+.
........#.
#.........
......#...
```

Option two, put a stack of failed suit prototypes in the bottom right quadrant of the mapped area:

```
....#.....
....+---+#
....|...|.
..#.|...|.
..+-+-+#|.
..|.|.|.|.
.#+-^-+-+.
......O.#.
#.........
......#...
```

Option three, put a crate of chimney-squeeze prototype fabric next to the standing desk in the bottom right quadrant:

```
....#.....
....+---+#
....|...|.
..#.|...|.
..+-+-+#|.
..|.|.|.|.
.#+-^-+-+.
.+----+O#.
#+----+...
......#...
```

Option four, put an alchemical retroencabulator near the bottom left corner:

```
....#.....
....+---+#
....|...|.
..#.|...|.
..+-+-+#|.
..|.|.|.|.
.#+-^-+-+.
..|...|.#.
#O+---+...
......#...
```

Option five, put the alchemical retroencabulator a bit to the right instead:

```
....#.....
....+---+#
....|...|.
..#.|...|.
..+-+-+#|.
..|.|.|.|.
.#+-^-+-+.
....|.|.#.
#..O+-+...
......#...
```

Option six, put a tank of sovereign glue right next to the tank of universal solvent:

```
....#.....
....+---+#
....|...|.
..#.|...|.
..+-+-+#|.
..|.|.|.|.
.#+-^-+-+.
.+----++#.
#+----++..
......#O..
```

It doesn't really matter what you choose to use as an obstacle so long as you and The Historians can put it into position without the guard noticing. The important thing is having enough options that you can find one that minimizes time paradoxes, and in this example, there are 6 different positions you could choose.

You need to get the guard stuck in a loop by adding a single new obstruction. How many different positions could you choose for this obstruction?

```{r solution2}
# Brute force: loop through locations visited to see effect of placing obstacle there
valid_locations <- list()
map_start <- get_start(input)

for (loc in locations_visited) {
  
  # Reset map
  map <- input
  
  # Place obstacle at this location
  map[loc[1], loc[2]] <- "#"
  
  # Keep track of obstacles hit on this run, to check if in loop
  obst_locs <- list()
  
  # Loop vars to determine how loop ends
  looping <- TRUE
  successful_loop <- FALSE
  
  # Get start location
  location <- map_start
  direction <- c(-1,0)
    
  while(looping & !successful_loop) {
    
    # Look at the next step
    new_location <- location + direction
    
    # If new location is outside map, no longer looping
    if (!within_bounds(new_location, map)) {
      looping <- FALSE
      steps_since_turn <- rep(1,8)
      next
    }
    
    # See what next step contains
    look <- map[new_location[1], new_location[2]]
    
    # If obstacle
    if (look == "#") {
      
      # Check if hit this obstacle before
      obst_loc <- list(new_location, direction)
      before <- obst_locs |>
        purrr::keep(\(l) identical(l, obst_loc))
      
      # If we have hit it before, we're in a loop so can exit
      if (length(before) != 0) {
        successful_loop <- TRUE
        next
      }
      # Otherwise, log that we've hit this obstacle
      obst_locs[[length(obst_locs)+1]] <- obst_loc
      # Turn 90 degrees and go again
      direction <- turn(direction)
      next
    }
    
    # If steppable, mark current square as done and move
    if (look == "."|look == "X") {
      # Mark current square as stepped on
      map[location[1], location[2]] <- "X"
      
      # Move to next step
      location <- new_location
      next
    }
  }
  
  # If loop found, it is a valid location for an obstacle
  if (successful_loop) {
    valid_locations[[length(valid_locations)+1]] <- loc
  }
}

length(valid_locations)
```
