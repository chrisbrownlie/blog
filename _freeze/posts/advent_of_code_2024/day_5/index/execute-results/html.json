{
  "hash": "cffb51d9548cef1914a395d350309a0e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"AOC 2024: Day 5\"\ndescription: \"Day 5 of the Advent of Code 2024: 'Print Queue'\"\nauthor: \"Chris Brownlie\"\ndate: \"2024-12-05\"\nfrom: markdown+emoji\ncategories:\n- rstats\n- \"advent of code\"\n---\n\n\n\n![](/assets/advent_of_code.png){height=90% width=90% fig-align=center fig-alt=\"Logo for Advent of Code\"}\n## Day 5: Print Queue\n\nSatisfied with their search on Ceres, the squadron of scholars suggests subsequently scanning the stationery stacks of sub-basement 17.\n\nThe North Pole printing department is busier than ever this close to Christmas, and while The Historians continue their search of this historically significant facility, an Elf operating a very familiar printer beckons you over.\n\nThe Elf must recognize you, because they waste no time explaining that the new sleigh launch safety manual updates won't print correctly. Failure to update the safety manuals would be dire indeed, so you offer your services.\n\nSafety protocols clearly indicate that new pages for the safety manuals must be printed in a very specific order. The notation X|Y means that if both page number X and page number Y are to be produced as part of an update, page number X must be printed at some point before page number Y.\n\nThe Elf has for you both the page ordering rules and the pages to produce in each update (your puzzle input), but can't figure out whether each update has the pages in the right order.\n\nFor example:\n\n```\n47|53\n97|13\n97|61\n97|47\n75|29\n61|13\n75|53\n29|13\n97|29\n53|29\n61|53\n97|53\n61|29\n47|13\n75|47\n97|75\n47|61\n75|61\n47|29\n75|13\n53|13\n\n75,47,61,53,29\n97,61,53,29,13\n75,29,13\n75,97,47,61,53\n61,13,29\n97,13,75,29,47\n```\n\nThe first section specifies the page ordering rules, one per line. The first rule, 47|53, means that if an update includes both page number 47 and page number 53, then page number 47 must be printed at some point before page number 53. (47 doesn't necessarily need to be immediately before 53; other pages are allowed to be between them.)\n\nThe second section specifies the page numbers of each update. Because most safety manuals are different, the pages needed in the updates are different too. The first update, 75,47,61,53,29, means that the update consists of page numbers 75, 47, 61, 53, and 29.\n\nTo get the printers going as soon as possible, start by identifying which updates are already in the right order.\n\nIn the above example, the first update (75,47,61,53,29) is in the right order:\n\n- 75 is correctly first because there are rules that put each other page after it: 75|47, 75|61, 75|53, and 75|29.\n- 47 is correctly second because 75 must be before it (75|47) and every other page must be after it according to 47|61, 47|53, and 47|29.\n- 61 is correctly in the middle because 75 and 47 are before it (75|61 and 47|61) and 53 and 29 are after it (61|53 and 61|29).\n- 53 is correctly fourth because it is before page number 29 (53|29).\n- 29 is the only page left and so is correctly last.\n\nBecause the first update does not include some page numbers, the ordering rules involving those missing page numbers are ignored.\n\nThe second and third updates are also in the correct order according to the rules. Like the first update, they also do not include every page number, and so only some of the ordering rules apply - within each update, the ordering rules that involve missing page numbers are not used.\n\nThe fourth update, 75,97,47,61,53, is not in the correct order: it would print 75 before 97, which violates the rule 97|75.\n\nThe fifth update, 61,13,29, is also not in the correct order, since it breaks the rule 29|13.\n\nThe last update, 97,13,75,29,47, is not in the correct order due to breaking several rules.\n\nFor some reason, the Elves also need to know the middle page number of each update being printed. Because you are currently only printing the correctly-ordered updates, you will need to find the middle page number of each correctly-ordered update. In the above example, the correctly-ordered updates are:\n\n```\n75,47,61,53,29\n97,61,53,29,13\n75,29,13\n```\n\nThese have middle page numbers of 61, 53, and 29 respectively. Adding these page numbers together gives 143.\n\nOf course, you'll need to be careful: the actual list of page ordering rules is bigger and more complicated than the above example.\n\nDetermine which updates are already in the correct order. What do you get if you add up the middle page number from those correctly-ordered updates?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\nlibrary(purrr)\n\ninput <- readr::read_lines(\"input.txt\")\n\n# Separate rules and reports\nrules <- input |>\n  keep(\\(x) str_detect(x, \"\\\\d+\\\\|\\\\d+\"))\nreports <- input |>\n  discard(\\(x) str_detect(x, \"\\\\d+\\\\|\\\\d+|^$\")) |>\n  str_split(\",\")\n\n# Check rule against a report\ncheck_report <- function(report, ruleset = rules) {\n  # For each pair, check if report passes\n  passed <- str_extract_all(ruleset, \"\\\\d+\") |>\n    map_lgl(\n      \\(rule) {\n        !isTRUE(which(report == rule[[2]]) < which(report == rule[[1]]))\n      }\n    ) |>\n    all()\n  \n  # If passes all rules, keep middle number\n  as.numeric(report[ceiling(length(report)/2)]) * passed\n}\n\ntotal <- map_dbl(reports, check_report)\nsum(total)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5268\n```\n\n\n:::\n:::\n\n\n\n--- Part Two ---\n\nWhile the Elves get to work printing the correctly-ordered updates, you have a little time to fix the rest of them.\n\nFor each of the incorrectly-ordered updates, use the page ordering rules to put the page numbers in the right order. For the above example, here are the three incorrectly-ordered updates and their correct orderings:\n\n- 75,97,47,61,53 becomes 97,75,47,61,53.\n- 61,13,29 becomes 61,29,13.\n- 97,13,75,29,47 becomes 97,75,47,29,13.\n\nAfter taking only the incorrectly-ordered updates and ordering them correctly, their middle page numbers are 47, 29, and 47. Adding these together produces 123.\n\nFind the updates which are not in the correct order. What do you get if you add up the middle page numbers after correctly ordering just those updates?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Try ordering by number of preceding conditions\nn_preceders <- function(n, r) {\n  str_detect(r, str_c(n, \"\\\\|\")) |>\n    sum()\n}\n\norder_by_n <- function(report, ruleset) {\n  # Keep only the relevant rules\n  el_regex <- str_c(report, collapse = \"|\")\n  relevant_rules <- ruleset |>\n    keep(\\(r) str_detect(r, str_c(\"(\", el_regex, \")\\\\|(\", el_regex, \")\")))\n  \n  # Order by number of times a number is first in a relevant rule \n  new_order <- report |>\n    map_int(\\(n) n_preceders(n, r = relevant_rules)) |>\n    order(decreasing = TRUE)\n  \n  # Order report based on this\n  report[new_order]\n}\n\n# Get only incorrect reports\nincorrect_reports <- reports[total == 0]\n\n# For each incorrect report, order and then check/get middle number\nsolution2 <- incorrect_reports |>\n  map_dbl(\n    \\(x) {\n      x |>\n        order_by_n(rules) |>\n        check_report(rules)\n    }\n  )\n\nsum(solution2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5799\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}