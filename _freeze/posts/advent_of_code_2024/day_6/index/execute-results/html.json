{
  "hash": "22a61c3493d4f8aa2e992f175b4ad21a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"AOC 2024: Day 6\"\ndescription: \"Day 6 of the Advent of Code 2024: 'Guard Gallivant'\"\nauthor: \"Chris Brownlie\"\ndate: \"2024-12-06\"\nfrom: markdown+emoji\ncategories:\n- rstats\n- \"advent of code\"\n---\n\n\n\n\n\n![](/assets/advent_of_code.png){height=90% width=90% fig-align=center fig-alt=\"Logo for Advent of Code\"}\n\n## Day 4: Guard Gallivant\n\nThe Historians use their fancy device again, this time to whisk you all away to the North Pole prototype suit manufacturing lab... in the year 1518! It turns out that having direct access to history is very convenient for a group of historians.\n\nYou still have to be careful of time paradoxes, and so it will be important to avoid anyone from 1518 while The Historians search for the Chief. Unfortunately, a single guard is patrolling this part of the lab.\n\nMaybe you can work out where the guard will go ahead of time so that The Historians can search safely?\n\nYou start by making a map (your puzzle input) of the situation. For example:\n\n```\n....#.....\n.........#\n..........\n..#.......\n.......#..\n..........\n.#..^.....\n........#.\n#.........\n......#...\n```\n\nThe map shows the current position of the guard with ^ (to indicate the guard is currently facing up from the perspective of the map). Any obstructions - crates, desks, alchemical reactors, etc. - are shown as #.\n\nLab guards in 1518 follow a very strict patrol protocol which involves repeatedly following these steps:\n- If there is something directly in front of you, turn right 90 degrees.\n- Otherwise, take a step forward.\n\nFollowing the above protocol, the guard moves up several times until she reaches an obstacle (in this case, a pile of failed suit prototypes):\n\n```\n....#.....\n....^....#\n..........\n..#.......\n.......#..\n..........\n.#........\n........#.\n#.........\n......#...\n```\n\nBecause there is now an obstacle in front of the guard, she turns right before continuing straight in her new facing direction:\n\n```\n....#.....\n........>#\n..........\n..#.......\n.......#..\n..........\n.#........\n........#.\n#.........\n......#...\n```\n\nReaching another obstacle (a spool of several very long polymers), she turns right again and continues downward:\n\n```\n....#.....\n.........#\n..........\n..#.......\n.......#..\n..........\n.#......v.\n........#.\n#.........\n......#...\n```\n\nThis process continues for a while, but the guard eventually leaves the mapped area (after walking past a tank of universal solvent):\n\n```\n....#.....\n.........#\n..........\n..#.......\n.......#..\n..........\n.#........\n........#.\n#.........\n......#v..\n```\n\nBy predicting the guard's route, you can determine which specific positions in the lab will be in the patrol path. Including the guard's starting position, the positions visited by the guard before leaving the area are marked with an X:\n\n```\n....#.....\n....XXXXX#\n....X...X.\n..#.X...X.\n..XXXXX#X.\n..X.X.X.X.\n.#XXXXXXX.\n.XXXXXXX#.\n#XXXXXXX..\n......#X..\n```\n\nIn this example, the guard will visit 41 distinct positions on your map.\n\nPredict the path of the guard. How many distinct positions will the guard visit before leaving the mapped area?\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\nlibrary(purrr)\nlibrary(tibble)\nlibrary(rlang)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'rlang'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:purrr':\n\n    %@%, flatten, flatten_chr, flatten_dbl, flatten_int, flatten_lgl,\n    flatten_raw, invoke, splice\n```\n\n\n:::\n\n```{.r .cell-code}\n# Read input into tibble\ninput <- readr::read_lines(\"input.txt\") |>\n  str_split(\"\") |>\n  map_dfr(\\(x) {\n    x |> \n      set_names(str_c(\"col_\", 1:length(x))) |> \n      as_tibble_row()\n  })\n\n# helper functions\nwithin_bounds <- function(location, limit_df) {\n  if (any(dim(limit_df)-location < 0) || \n      any(location < 1)) return(FALSE)\n  TRUE\n}\nturn <- function(d) c(d[2], -d[1])\n\n# Identify start location\nloc_col <- map_lgl(input, \\(col) any(col == \"^\")) |> set_names(NULL) |> which()\nloc_row <- pmap_lgl(input, \\(...) any(list(...) == \"^\")) |> which()\n\n# Initialise variables\nmap <- input\nlocation <- c(loc_row, loc_col)\ndirection <- c(-1,0)\n\n# Loop while the next location is still on the map\nwhile(within_bounds(location + direction, map)) {\n  \n  # Look at the next step and see what it is\n  new_location <- location + direction\n  look <- map[new_location[1], new_location[2]]\n  \n  # If obstacle, turn and try again (keeping same location)\n  if (look == \"#\") {\n    direction <- turn(direction)\n    next\n  }\n  \n  # If steppable, mark current square as done and move\n  if (look == \".\"|look == \"X\") {\n    map[location[1], location[2]] <- \"X\"\n    map[new_location[1], new_location[2]] <- \"^\"\n    location <- new_location\n    next\n  }\n}\n\n# Count stepped locations, plus 1 as the final location isn't marked on the map\nsum(map == \"X\") + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5153\n```\n\n\n:::\n:::\n\n\n\n\n\n## Part Two\n\nWhile The Historians begin working around the guard's patrol route, you borrow their fancy device and step outside the lab. From the safety of a supply closet, you time travel through the last few months and record the nightly status of the lab's guard post on the walls of the closet.\n\nReturning after what seems like only a few seconds to The Historians, they explain that the guard's patrol area is simply too large for them to safely search the lab without getting caught.\n\nFortunately, they are pretty sure that adding a single new obstruction won't cause a time paradox. They'd like to place the new obstruction in such a way that the guard will get stuck in a loop, making the rest of the lab safe to search.\n\nTo have the lowest chance of creating a time paradox, The Historians would like to know all of the possible positions for such an obstruction. The new obstruction can't be placed at the guard's starting position - the guard is there right now and would notice.\n\nIn the above example, there are only 6 different positions where a new obstruction would cause the guard to get stuck in a loop. The diagrams of these six situations use O to mark the new obstruction, | to show a position where the guard moves up/down, - to show a position where the guard moves left/right, and + to show a position where the guard moves both up/down and left/right.\n\nOption one, put a printing press next to the guard's starting position:\n\n```\n....#.....\n....+---+#\n....|...|.\n..#.|...|.\n....|..#|.\n....|...|.\n.#.O^---+.\n........#.\n#.........\n......#...\n```\n\nOption two, put a stack of failed suit prototypes in the bottom right quadrant of the mapped area:\n\n```\n....#.....\n....+---+#\n....|...|.\n..#.|...|.\n..+-+-+#|.\n..|.|.|.|.\n.#+-^-+-+.\n......O.#.\n#.........\n......#...\n```\n\nOption three, put a crate of chimney-squeeze prototype fabric next to the standing desk in the bottom right quadrant:\n\n```\n....#.....\n....+---+#\n....|...|.\n..#.|...|.\n..+-+-+#|.\n..|.|.|.|.\n.#+-^-+-+.\n.+----+O#.\n#+----+...\n......#...\n```\n\nOption four, put an alchemical retroencabulator near the bottom left corner:\n\n```\n....#.....\n....+---+#\n....|...|.\n..#.|...|.\n..+-+-+#|.\n..|.|.|.|.\n.#+-^-+-+.\n..|...|.#.\n#O+---+...\n......#...\n```\n\nOption five, put the alchemical retroencabulator a bit to the right instead:\n\n```\n....#.....\n....+---+#\n....|...|.\n..#.|...|.\n..+-+-+#|.\n..|.|.|.|.\n.#+-^-+-+.\n....|.|.#.\n#..O+-+...\n......#...\n```\n\nOption six, put a tank of sovereign glue right next to the tank of universal solvent:\n\n```\n....#.....\n....+---+#\n....|...|.\n..#.|...|.\n..+-+-+#|.\n..|.|.|.|.\n.#+-^-+-+.\n.+----++#.\n#+----++..\n......#O..\n```\n\nIt doesn't really matter what you choose to use as an obstacle so long as you and The Historians can put it into position without the guard noticing. The important thing is having enough options that you can find one that minimizes time paradoxes, and in this example, there are 6 different positions you could choose.\n\nYou need to get the guard stuck in a loop by adding a single new obstruction. How many different positions could you choose for this obstruction?\n\n\n\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}